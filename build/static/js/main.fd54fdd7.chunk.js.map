{"version":3,"sources":["App.js","index.js"],"names":["mapboxgl","accessToken","App","map","Map","container","style","zoom","center","pitch","antialias","modelRotate","Math","PI","modelAsMercatorCoordinate","MercatorCoordinate","fromLngLat","modelTransform","translateX","x","translateY","y","translateZ","z","rotateX","rotateY","rotateZ","scale","meterInMercatorCoordinateUnits","customLayer","id","type","renderingMode","onAdd","gl","this","camera","Camera","scene","Scene","directionalLight","DirectionalLight","position","set","normalize","add","directionalLight2","renderer","WebGLRenderer","canvas","getCanvas","context","autoClear","render","matrix","rotationX","Matrix4","makeRotationAxis","Vector3","rotationY","rotationZ","m","fromArray","l","makeTranslation","multiply","projectionMatrix","resetState","triggerRepaint","on","addLayer","ReactDOM","StrictMode","document","getElementById"],"mappings":"4KAIAA,IAASC,YAAc,6FAEvB,IAiGeC,EAjGH,WACV,IAAMC,EAAM,IAAIH,IAASI,IAAI,CAC3BC,UAAW,MACXC,MAAO,sCACPC,KAAM,GACNC,OAAQ,CAAC,UAAW,SACpBC,MAAO,GACPC,WAAW,IAKPC,EAAc,CAACC,KAAKC,GAAK,EAAG,EAAG,GAC/BC,EAA4Bd,IAASe,mBAAmBC,WAH1C,EAAE,OAAS,SACT,GAOhBC,EAAiB,CACrBC,WAAYJ,EAA0BK,EACtCC,WAAYN,EAA0BO,EACtCC,WAAYR,EAA0BS,EACtCC,QAASb,EAAY,GACrBc,QAASd,EAAY,GACrBe,QAASf,EAAY,GAIrBgB,MAAOb,EAA0Bc,kCAG7BC,EAAc,CAClBC,GAAI,WACJC,KAAM,SACNC,cAAe,KACfC,MAAO,SAAU9B,EAAK+B,GACpBC,KAAKC,OAAS,IAAIC,IAClBF,KAAKG,MAAQ,IAAIC,IAEjB,IAAMC,EAAmB,IAAIC,IAAiB,UAC9CD,EAAiBE,SAASC,IAAI,GAAI,GAAI,KAAKC,YAC3CT,KAAKG,MAAMO,IAAIL,GACf,IAAMM,EAAoB,IAAIL,IAAiB,UAC/CK,EAAkBJ,SAASC,IAAI,EAAG,GAAI,KAAKC,YAC3CT,KAAKG,MAAMO,IAAIC,GAGfX,KAAKhC,IAAMA,EAEXgC,KAAKY,SAAW,IAAIC,IAAc,CAChCC,OAAQ9C,EAAI+C,YACZC,QAASjB,EACTxB,WAAW,IAEbyB,KAAKY,SAASK,WAAY,GAE5BC,OAAQ,SAAUnB,EAAIoB,GACpB,IAAMC,GAAY,IAAIC,KAAUC,iBAC9B,IAAIC,IAAQ,EAAG,EAAG,GAClBzC,EAAeO,SAEXmC,GAAY,IAAIH,KAAUC,iBAC9B,IAAIC,IAAQ,EAAG,EAAG,GAClBzC,EAAeQ,SAEXmC,GAAY,IAAIJ,KAAUC,iBAC9B,IAAIC,IAAQ,EAAG,EAAG,GAClBzC,EAAeS,SAEXmC,GAAI,IAAIL,KAAUM,UAAUR,GAC5BS,GAAI,IAAIP,KACXQ,gBACC/C,EAAeC,WACfD,EAAeG,WACfH,EAAeK,YAEhBK,MACC,IAAI+B,IACFzC,EAAeU,OACdV,EAAeU,MAChBV,EAAeU,QAGlBsC,SAASV,GACTU,SAASN,GACTM,SAASL,GACZzB,KAAKC,OAAO8B,iBAAmBL,EAAEI,SAASF,GAC1C5B,KAAKY,SAASoB,aACdhC,KAAKY,SAASM,OAAOlB,KAAKG,MAAOH,KAAKC,QACtCD,KAAKhC,IAAIiE,mBAGbjE,EAAIkE,GAAG,cAAc,WACnBlE,EAAImE,SAASzC,EAAa,sB,OC/F9B0C,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fd54fdd7.chunk.js","sourcesContent":["import { Camera, Scene, DirectionalLight, Vector3, Matrix4, WebGLRenderer } from 'three';\nimport mapboxgl from 'mapbox-gl';\n//import './component/Map.css'\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm9oaXRpaWMiLCJhIjoiY2t2eGkyanJ3Y2c2azMwczdtOGppa3N5ZyJ9.G4VtowYp1GEpWxvh3nRFVQ';\n\nconst App = () => {\n  const map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/satellite-v9',\n    zoom: 18,\n    center: [148.9819, -35.3981],\n    pitch: 60,\n    antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased\n  });\n  // parameters to ensure the model is georeferenced correctly on the map\n  const modelOrigin = [-75.6980, 45.3876];\n  const modelAltitude = 0;\n  const modelRotate = [Math.PI / 2, 0, 0];\n  const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(\n    modelOrigin,\n    modelAltitude\n  );\n  // transformation parameters to position, rotate and scale the 3D model onto the map\n  const modelTransform = {\n    translateX: modelAsMercatorCoordinate.x,\n    translateY: modelAsMercatorCoordinate.y,\n    translateZ: modelAsMercatorCoordinate.z,\n    rotateX: modelRotate[0],\n    rotateY: modelRotate[1],\n    rotateZ: modelRotate[2],\n    /* Since the 3D model is in real world meters, a scale transform needs to be\n    * applied since the CustomLayerInterface expects units in MercatorCoordinates.\n    */\n    scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()\n  };\n  // configuration of the custom layer for a 3D model per the CustomLayerInterface\n  const customLayer = {\n    id: '3d-model',\n    type: 'custom',\n    renderingMode: '3d',\n    onAdd: function (map, gl) {\n      this.camera = new Camera();\n      this.scene = new Scene();\n      // create two .js lights to illuminate the model\n      const directionalLight = new DirectionalLight(0xffffff);\n      directionalLight.position.set(0, -70, 100).normalize();\n      this.scene.add(directionalLight);\n      const directionalLight2 = new DirectionalLight(0xffffff);\n      directionalLight2.position.set(0, 70, 100).normalize();\n      this.scene.add(directionalLight2);\n      // use the js GLTF loader to add the 3D model to the js scene\n      //This is where i instatiate the IFC loader to the React.dom\n      this.map = map;\n      // use the Mapbox GL JS map canvas for js\n      this.renderer = new WebGLRenderer({\n        canvas: map.getCanvas(),\n        context: gl,\n        antialias: true\n      });\n      this.renderer.autoClear = false;\n    },\n    render: function (gl, matrix) {\n      const rotationX = new Matrix4().makeRotationAxis(\n        new Vector3(1, 0, 0),\n        modelTransform.rotateX\n      );\n      const rotationY = new Matrix4().makeRotationAxis(\n        new Vector3(0, 1, 0),\n        modelTransform.rotateY\n      );\n      const rotationZ = new Matrix4().makeRotationAxis(\n        new Vector3(0, 0, 1),\n        modelTransform.rotateZ\n      );\n      const m = new Matrix4().fromArray(matrix);\n      const l = new Matrix4()\n        .makeTranslation(\n          modelTransform.translateX,\n          modelTransform.translateY,\n          modelTransform.translateZ\n        )\n        .scale(\n          new Vector3(\n            modelTransform.scale,\n            -modelTransform.scale,\n            modelTransform.scale\n          )\n        )\n        .multiply(rotationX)\n        .multiply(rotationY)\n        .multiply(rotationZ);\n      this.camera.projectionMatrix = m.multiply(l);\n      this.renderer.resetState();\n      this.renderer.render(this.scene, this.camera);\n      this.map.triggerRepaint();\n    }\n  };\n  map.on('style.load', () => {\n    map.addLayer(customLayer, 'waterway-label');\n  });\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}