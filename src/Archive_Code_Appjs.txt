export default function App(){
  const[viewport, setViewport] = useState({
    latitude: 45.3876,
    longitude: -75.6980,
    width: "100vw",
    height: "100vh",
    zoom: 12
  });


  return(
    <div>
      <ReactMapGl
        {...viewport}
        mapboxApiAccessToken={"pk.eyJ1Ijoicm9oaXRpaWMiLCJhIjoiY2t2eGkyanJ3Y2c2azMwczdtOGppa3N5ZyJ9.G4VtowYp1GEpWxvh3nRFVQ"}
        mapStyle="mapbox://styles/mapbox/light-v10"
          onViewportChange={viewport => {setViewport(viewport);
        }}
      >
      </ReactMapGl> 
    </div>
  );
 }
__________________________________________________________

import React, { useRef, useEffect, useState } from 'react';
import ReactMapGl, {Marker} from React-Map-Global;
import mapboxgl from 'mapbox-gl';
import './component/Map.css'
//Completely unnecessary but I was able to make a location distane calibration function to aid wirh distances to buildings
mapboxgl.accessToken = 'pk.eyJ1Ijoicm9oaXRpaWMiLCJhIjoiY2t2eGkyanJ3Y2c2azMwczdtOGppa3N5ZyJ9.G4VtowYp1GEpWxvh3nRFVQ';
//Brand new specialized mapbox token need for this to render the viewer

const App = () => {
  const mapContainer = useRef(null);
  const map = useRef(null);
  const [lng, setLng] = useState(-75.6980);
  const [lat, setLat] = useState(45.3876);
  //Carleton Coordinates
  const [zoom, setZoom] = useState(12);
  const start = [lng, lat];

  useEffect(() => {
    if (map.current) return; // instantiate the map 1 time
    map.current = new mapboxgl.Map({
      container: mapContainer.current,
      style: 'mapbox://styles/mapbox/satellite-v9',// Street Bird's eye view  mapbox://styles/mapbox/streets-v11 mapbox://styles/mapbox/light-v10
      center: [lng, lat],
      zoom: zoom
    });
    map.current.on('move', () => {
      setLng(map.current.getCenter().lng.toFixed(4));
      setLat(map.current.getCenter().lat.toFixed(4));
      setZoom(map.current.getZoom().toFixed(2));
    });
    route();

  }, [map.current]);

  const locate = () => {
    map.current.addControl(
      new mapboxgl.GeolocateControl({
        positionOptions: {
          enableHighAccuracy: true,
        },
        // When active the map will receive updates to the device's location as it changes.
        trackUserLocation: true,
        style: {
          right: 10,
          top: 10
        },
        position: 'bottom-left',
        // Draw an arrow next to the location dot to indicate which direction the device is heading.
        showUserHeading: true
      })
    );
  }

  const route = () => {
    locate();
    map.current.on('load', () => {
      // this is intended to display the first open world view from the Geogratis extention we had
      map.current.addLayer({
        id: 'point',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'FeatureCollection',
            features: [
              {
                type: 'Feature',
                properties: {},
                geometry: {
                  type: 'Point',
                  coordinates: start
                }
              }
            ]
          }
        },
        paint: {
          'circle-radius': 10,
          'circle-color': '#3887be'
        }
      });

      map.current.on('click', (event) => {
        const coords = Object.keys(event.lngLat).map((key) => event.lngLat[key]);
        const end = {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'Point',
                coordinates: coords
              }
            }
          ]
        };
        if (map.current.getLayer('end')) {
          map.current.getSource('end').setData(end);
        } else {
          map.current.addLayer({
            id: 'end',
            type: 'circle',
            source: {
              type: 'geojson',
              data: {
                type: 'FeatureCollection',
                features: [
                  {
                    type: 'Feature',
                    properties: {},
                    geometry: {
                      type: 'Point',
                      coordinates: coords
                    }
                  }
                ]
              }
            },
            paint: {
              'circle-radius': 10,
              'circle-color': '#f30'
            }
          });
        }
        getRoute(coords);
      });
    });
  }

  async function getRoute(end) {
    const query = await fetch(
      `https://api.mapbox.com/directions/v5/mapbox/cycling/${start[0]},${start[1]};${end[0]},${end[1]}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`,
      { method: 'GET' }
    );
    const json = await query.json();
    const data = json.routes[0];
    const route = data.geometry.coordinates;
    const geojson = {
      type: 'Feature',
      properties: {},
      geometry: {
        type: 'LineString',
        coordinates: route
      }
    };
    if (map.current.getSource('route')) {
      map.current.getSource('route').setData(geojson);
    }
    // otherwise, we'll make a new request
    else {
      map.current.addLayer({
        id: 'route',
        type: 'line',
        source: {
          type: 'geojson',
          data: geojson
        },
        layout: {
          'line-join': 'round',
          'line-cap': 'round'
        },
        paint: {
          'line-color': '#3887be',
          'line-width': 5,
          'line-opacity': 0.75
        }
      });
    }
    // get the sidebar and add the instructions
    const instructions = document.getElementById('instructions');
    const steps = data.legs[0].steps;

    let tripInstructions = '';
    for (const step of steps) {
      tripInstructions += `<li>${step.maneuver.instruction}</li>`;
    }
    instructions.innerHTML = `<p><strong>Trip duration: ${Math.floor(
      data.duration / 60
    )} min</strong></p><ol>${tripInstructions}</ol>`;
  }

  return (
    <>
      <div ref={mapContainer} className="map-container" />
`````    <div>
      <ReactMapGL
        {...viewport}
        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}
        mapStyle="mapbox://styles/leighhalliday/cjufmjn1r2kic1fl9wxg7u1l4"
        onViewportChange={viewport => {
          setViewport(viewport);
        }}
      >
        {buildingDate.features.map(building => (
          <Marker
            key={building.properties.PARK_ID}
            latitude={building.geometry.coordinates[1]}
            longitude={building.geometry.coordinates[0]}
          >
            <button
              className="marker-btn"
              onClick={e => {
                e.preventDefault();
                setSelectedBuilding(building);
              }}
            >
              <img src="/cims-logo-black.png" alt="Building Icon" />
            </button>
          </Marker>
        ))}

        {selectedBuilding ? (
          <Popup
            latitude={selectedBuilding.geometry.coordinates[1]}
            longitude={selectedBuilding.geometry.coordinates[0]}
            onClose={() => {
              setSelectedBuilding(null);
            }}
          >
            <div>
              <h2>{selectedBuilding.properties.NAME}</h2>
              <p>{selectedBuilding.properties.DESCRIPTIO}</p>
            </div>
          </Popup>
        ) : null}
      </ReactMapGL>
    </div>`
      {/* <div id="instructions" className="instructions"></div> */}
    </>
  );
};

export default App;



________________________________________________________________________
THREE JS SCENE IMPLEMENTATION
________________________________________________________________________

  // const map = new mapboxgl.Map({
  //   container: 'map',
  //   style: 'mapbox://styles/mapbox/light-v10',
  //   zoom: 6,
  //   center: [148.9819, -35.3981],
  //   pitch: 60,
  //   antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased
  // });
  // // parameters to ensure the model is georeferenced correctly on the map
  // const modelOrigin = [-75.6980, 45.3876];
  // const modelAltitude = 0;
  // const modelRotate = [Math.PI / 2, 0, 0];
  // const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(
  //   modelOrigin,
  //   modelAltitude
  // );
  // // transformation parameters to position, rotate and scale the 3D model onto the map
  // const modelTransform = {
  //   translateX: modelAsMercatorCoordinate.x,
  //   translateY: modelAsMercatorCoordinate.y,
  //   translateZ: modelAsMercatorCoordinate.z,
  //   rotateX: modelRotate[0],
  //   rotateY: modelRotate[1],
  //   rotateZ: modelRotate[2],
  //   /* Since the 3D model is in real world meters, a scale transform needs to be
  //   * applied since the CustomLayerInterface expects units in MercatorCoordinates.
  //   */
  //   scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()
  // };
  // // configuration of the custom layer for a 3D model per the CustomLayerInterface
  // const customLayer = {
  //   id: '3d-model',
  //   type: 'custom',
  //   renderingMode: '3d',
  //   onAdd: function (map, gl) {
  //     this.camera = new Camera();
  //     this.scene = new Scene();
  //     // create two .js lights to illuminate the model
  //     const directionalLight = new DirectionalLight(0xffffff);
  //     directionalLight.position.set(0, -70, 100).normalize();
  //     this.scene.add(directionalLight);
  //     const directionalLight2 = new DirectionalLight(0xffffff);
  //     directionalLight2.position.set(0, 70, 100).normalize();
  //     this.scene.add(directionalLight2);
  //     // use the js GLTF loader to add the 3D model to the js scene
  //     //This is where i instatiate the IFC loader to the React.dom
  //     this.map = map;
  //     // use the Mapbox GL JS map canvas for js
  //     this.renderer = new WebGLRenderer({
  //       canvas: map.getCanvas(),
  //       context: gl,
  //       antialias: true
  //     });
  //     this.renderer.autoClear = false;
  //   },
  //   render: function (gl, matrix) {
  //     const rotationX = new Matrix4().makeRotationAxis(
  //       new Vector3(1, 0, 0),
  //       modelTransform.rotateX
  //     );
  //     const rotationY = new Matrix4().makeRotationAxis(
  //       new Vector3(0, 1, 0),
  //       modelTransform.rotateY
  //     );
  //     const rotationZ = new Matrix4().makeRotationAxis(
  //       new Vector3(0, 0, 1),
  //       modelTransform.rotateZ
  //     );
  //     const m = new Matrix4().fromArray(matrix);
  //     const l = new Matrix4()
  //       .makeTranslation(
  //         modelTransform.translateX,
  //         modelTransform.translateY,
  //         modelTransform.translateZ
  //       )
  //       .scale(
  //         new Vector3(
  //           modelTransform.scale,
  //           -modelTransform.scale,
  //           modelTransform.scale
  //         )
  //       )
  //       .multiply(rotationX)
  //       .multiply(rotationY)
  //       .multiply(rotationZ);
  //     this.camera.projectionMatrix = m.multiply(l);
  //     this.renderer.resetState();
  //     this.renderer.render(this.scene, this.camera);
  //     this.map.triggerRepaint();
  //   }
  // };
  // map.on('style.load', () => {
  //   map.addLayer(customLayer, 'waterway-label');
  // });





    //,
  // "devDependencies": {
  //   "@types/three": "^0.129.1",
  //   "cpx": "^1.5.0"
  // },
  // "resolutions": {
  //   "babel-jest": "26.6.0"
  // }



  // const map = new mapboxgl.Map({
  //   container: 'map',
  //   style: 'mapbox://styles/mapbox/light-v10',
  //   zoom: 6,
  //   center: [45.3876, -75.6980],
  //   pitch: 60,
  //   antialias: true // create the gl context with MSAA antialiasing, so custom layers are antialiased
  // });
  // // parameters to ensure the model is georeferenced correctly on the map
  // const modelOrigin = [-75.6980, 45.3876];
  // const modelAltitude = 0;
  // const modelRotate = [Math.PI / 2, 0, 0];
  // const modelAsMercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat(
  //   modelOrigin,
  //   modelAltitude
  // );
  // // transformation parameters to position, rotate and scale the 3D model onto the map
  // const modelTransform = {
  //   translateX: modelAsMercatorCoordinate.x,
  //   translateY: modelAsMercatorCoordinate.y,
  //   translateZ: modelAsMercatorCoordinate.z,
  //   rotateX: modelRotate[0],
  //   rotateY: modelRotate[1],
  //   rotateZ: modelRotate[2],
  //   /* Since the 3D model is in real world meters, a scale transform needs to be
  //   * applied since the CustomLayerInterface expects units in MercatorCoordinates.
  //   */
  //   scale: modelAsMercatorCoordinate.meterInMercatorCoordinateUnits()
  // };
  // // configuration of the custom layer for a 3D model per the CustomLayerInterface
  // const customLayer = {
  //   id: '3d-model',
  //   type: 'custom',
  //   renderingMode: '3d',
  //   onAdd: function (map, gl) {
  //     this.camera = new Camera();
  //     this.scene = new Scene();
  //     // create two .js lights to illuminate the model
  //     const directionalLight = new DirectionalLight(0xffffff);
  //     directionalLight.position.set(0, -70, 100).normalize();
  //     this.scene.add(directionalLight);
  //     const directionalLight2 = new DirectionalLight(0xffffff);
  //     directionalLight2.position.set(0, 70, 100).normalize();
  //     this.scene.add(directionalLight2);
  //     // use the js GLTF loader to add the 3D model to the js scene
  //     //This is where i instatiate the IFC loader to the React.dom
  //     this.map = map;
  //     // use the Mapbox GL JS map canvas for js
  //     this.renderer = new WebGLRenderer({
  //       canvas: map.getCanvas(),
  //       context: gl,
  //       antialias: true
  //     });
  //     this.renderer.autoClear = false;
  //   },
  //   render: function (gl, matrix) {
  //     const rotationX = new Matrix4().makeRotationAxis(
  //       new Vector3(1, 0, 0),
  //       modelTransform.rotateX
  //     );
  //     const rotationY = new Matrix4().makeRotationAxis(
  //       new Vector3(0, 1, 0),
  //       modelTransform.rotateY
  //     );
  //     const rotationZ = new Matrix4().makeRotationAxis(
  //       new Vector3(0, 0, 1),
  //       modelTransform.rotateZ
  //     );
  //     const m = new Matrix4().fromArray(matrix);
  //     const l = new Matrix4()
  //       .makeTranslation(
  //         modelTransform.translateX,
  //         modelTransform.translateY,
  //         modelTransform.translateZ
  //       )
  //       .scale(
  //         new Vector3(
  //           modelTransform.scale,
  //           -modelTransform.scale,
  //           modelTransform.scale
  //         )
  //       )
  //       .multiply(rotationX)
  //       .multiply(rotationY)
  //       .multiply(rotationZ);
  //     this.camera.projectionMatrix = m.multiply(l);
  //     this.renderer.resetState();
  //     this.renderer.render(this.scene, this.camera);
  //     this.map.triggerRepaint();
  //   }
  // };
  // map.on('style.load', () => {
  //   map.addLayer(customLayer, 'waterway-label');
  // });